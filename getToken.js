const axios = require('axios');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

// ===============================================================
// >> CH·ªà C·∫¶N S·ª¨A D√íNG N√ÄY <<
const PAGE_NAME_TO_FIND = 'Ensemble Stars VN Confession'; // S·ª≠a l·∫°i cho ƒë√∫ng t√™n Page c·ªßa b·∫°n
// ===============================================================

class FacebookTokenManager {
    constructor() {
        this.appId = process.env.FACEBOOK_APP_ID;
        this.appSecret = process.env.FACEBOOK_APP_SECRET;
        this.baseURL = 'https://graph.facebook.com/v19.0'; // Lu√¥n d√πng phi√™n b·∫£n m·ªõi

        if (!this.appId || !this.appSecret) {
            throw new Error('Vui l√≤ng ƒëi·ªÅn FACEBOOK_APP_ID v√† FACEBOOK_APP_SECRET trong file .env');
        }
    }

    /**
     * ƒê·ªïi token ng·∫Øn h·∫°n sang token d√†i h·∫°n (60 ng√†y)
     */
    async exchangeForLongLivedToken(shortLivedToken) {
        try {
            const response = await axios.get(`${this.baseURL}/oauth/access_token`, {
                params: {
                    grant_type: 'fb_exchange_token',
                    client_id: this.appId,
                    client_secret: this.appSecret,
                    fb_exchange_token: shortLivedToken
                }
            });
            console.log('‚úÖ ƒê√£ ƒë·ªïi sang User Token d√†i h·∫°n.');
            return response.data.access_token;
        } catch (error) {
            console.error('‚ùå L·ªói khi ƒë·ªïi sang token d√†i h·∫°n:', error.response?.data || error.message);
            throw error;
        }
    }

    /**
     * L·∫•y Page Access Token (kh√¥ng bao gi·ªù h·∫øt h·∫°n)
     */
    async getPageAccessToken(userAccessToken) {
        try {
            const response = await axios.get(`${this.baseURL}/me/accounts`, {
                params: {
                    access_token: userAccessToken,
                    fields: 'id,name,access_token' // Ch·ªâ l·∫•y c√°c tr∆∞·ªùng c·∫ßn thi·∫øt
                }
            });

            console.log('üìÑ Danh s√°ch c√°c Page b·∫°n qu·∫£n l√Ω:');
            response.data.data.forEach(page => console.log(` - ${page.name}`));
            
            const targetPage = response.data.data.find(page => page.name === PAGE_NAME_TO_FIND);

            if (targetPage) {
                console.log(`\nüéØ ƒê√£ t√¨m th·∫•y Page: ${targetPage.name}`);
                await this.verifyToken(targetPage.access_token);
                return {
                    pageId: targetPage.id,
                    pageAccessToken: targetPage.access_token,
                    pageName: targetPage.name
                };
            } else {
                throw new Error(`Kh√¥ng t√¨m th·∫•y Page n√†o c√≥ t√™n "${PAGE_NAME_TO_FIND}" trong danh s√°ch.`);
            }
        } catch (error) {
            console.error('‚ùå L·ªói khi l·∫•y Page Token:', error.response?.data || error.message);
            throw error;
        }
    }
    
    /**
     * Ki·ªÉm tra th√¥ng tin v√† th·ªùi h·∫°n c·ªßa token
     */
    async verifyToken(accessToken) {
        try {
            const appToken = `${this.appId}|${this.appSecret}`;
            const response = await axios.get(`${this.baseURL}/debug_token`, {
                params: {
                    input_token: accessToken,
                    access_token: appToken
                }
            });

            const { data } = response.data;
            console.log('üîç Th√¥ng tin Token:');
            console.log(`  - Lo·∫°i: ${data.type}`);
            console.log(`  - H·ª£p l·ªá: ${data.is_valid}`);
            console.log(`  - H·∫øt h·∫°n: ${data.expires_at === 0 ? 'Kh√¥ng bao gi·ªù' : new Date(data.expires_at * 1000).toLocaleString()}`);
            
            if (data.expires_at !== 0) {
                 console.warn('‚ö†Ô∏è C·∫£nh b√°o: Token n√†y c√≥ th·ªùi h·∫°n. H√£y ch·∫Øc ch·∫Øn b·∫°n ƒë√£ d√πng User Token d√†i h·∫°n ƒë·ªÉ l·∫•y Page Token.');
            }

        } catch (error) {
            console.error('‚ùå L·ªói khi x√°c th·ª±c token:', error.response?.data || error.message);
        }
    }

    /**
     * Lu·ªìng x·ª≠ l√Ω ho√†n ch·ªânh
     */
    async getPermanentToken(shortLivedToken) {
        console.log('üöÄ B·∫Øt ƒë·∫ßu qu√° tr√¨nh l·∫•y token vƒ©nh vi·ªÖn...\n');
        try {
            console.log('--- B∆Ø·ªöC 1: ƒê·ªïi sang User Token d√†i h·∫°n ---');
            const longLivedToken = await this.exchangeForLongLivedToken(shortLivedToken);

            console.log('\n--- B∆Ø·ªöC 2: L·∫•y Page Token vƒ©nh vi·ªÖn ---');
            const pageInfo = await this.getPageAccessToken(longLivedToken);

            console.log('\nüéâ TH√ÄNH C√îNG! Copy c√°c d√≤ng sau v√†o file .env c·ªßa b·∫°n:');
            console.log('===========================================================');
            console.log(`FACEBOOK_PAGE_ID=${pageInfo.pageId}`);
            console.log(`FACEBOOK_PAGE_ACCESS_TOKEN=${pageInfo.pageAccessToken}`);
            console.log('===========================================================');

        } catch (error) {
            console.error('\nüí• QU√Å TR√åNH TH·∫§T B·∫†I üí•');
        }
    }
}

// H√†m main ƒë·ªÉ ch·∫°y script
async function main() {
    const tokenManager = new FacebookTokenManager();
    const shortLivedToken = process.argv[2];

    if (!shortLivedToken) {
        console.log('üìñ H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG:');
        console.log('   node getToken.js <YOUR_SHORT_LIVED_TOKEN>');
        console.log('\n   L·∫•y token ng·∫Øn h·∫°n t·ª´: https://developers.facebook.com/tools/explorer/');
        console.log('   C√°c quy·ªÅn c·∫ßn c√≥: pages_show_list, pages_read_engagement, pages_manage_posts');
        return;
    }
    
    await tokenManager.getPermanentToken(shortLivedToken);
}

main();